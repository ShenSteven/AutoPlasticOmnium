# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import pyqtSignal
from PyQt5.QtWidgets import QDialog, QApplication

from ui.ui_settings import Ui_SettingsDialog
import conf.globalvar as gv


class SettingsDialog(QDialog, Ui_SettingsDialog):
    signal = pyqtSignal()
    # valueChangeSignal = pyqtSignal([str], [int], [bool])
    isChange = False

    def __init__(self, parent=None):
        QDialog.__init__(self, parent)
        self.verticalLayout = None
        self.horizontalLayout = None
        self.signal.connect(self.init_tabWidget)
        self.setupUi(self)
        # self.init_tabWidget()

    def init_tabWidget(self):
        for x in gv.cf.__dict__:
            setattr(self, x, QtWidgets.QWidget())
            tab = getattr(self, x)
            tab.setObjectName(x)
            self.tabWidget.addTab(tab, "")
            self.tabWidget.setTabText(self.tabWidget.indexOf(tab), x)

            self.verticalLayout = QtWidgets.QVBoxLayout(tab)
            self.verticalLayout.setContentsMargins(2, 2, 2, 2)
            self.verticalLayout.setSpacing(10)
            self.verticalLayout.setObjectName("verticalLayout")

            for y in gv.cf.__dict__[x].__dict__:
                setting = getattr(gv.cf.__dict__[x], y)
                # print('setting:', y, '=', setting)
                if isinstance(setting, list) or isinstance(setting, dict):
                    continue
                # horizontalLayout
                self.horizontalLayout = QtWidgets.QHBoxLayout()
                self.horizontalLayout.setContentsMargins(1, -1, -1, -1)
                self.horizontalLayout.setSpacing(1)
                self.horizontalLayout.setObjectName("horizontalLayout")

                # label
                setattr(self, y, QtWidgets.QLabel(tab))
                label = getattr(self, y)
                label.setObjectName(y)
                label.setText(y)
                self.horizontalLayout.addWidget(label)

                if isinstance(setting, bool):
                    # checkbox
                    setattr(self, y, QtWidgets.QCheckBox(tab))
                    checkbox = getattr(self, y)
                    checkbox.setObjectName(y)
                    checkbox.setChecked(setting)
                    self.horizontalLayout.addWidget(checkbox)
                    self.verticalLayout.addLayout(self.horizontalLayout)
                    checkbox.stateChanged.connect(self.valueChange)
                    # self.valueChangeSignal[bool].connect(self.update_setting)
                else:
                    # lineEdit
                    setattr(self, y, QtWidgets.QLineEdit(tab))
                    lineEdit = getattr(self, y)
                    sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
                    lineEdit.setSizePolicy(sizePolicy)
                    lineEdit.setMinimumSize(QtCore.QSize(450, 20))
                    lineEdit.setObjectName(y)
                    lineEdit.setText(str(setting))
                    lineEdit.textChanged.connect(self.valueChange)
                    if isinstance(setting, str):
                        pass
                        # self.valueChangeSignal[str].connect(self.update_setting)
                    elif isinstance(setting, int):
                        # self.valueChangeSignal[int].connect(self.update_setting)
                        lineEdit.setStyleSheet(f"color: rgb(0, 0, 255);")
                    self.horizontalLayout.addWidget(lineEdit)
                    self.verticalLayout.addLayout(self.horizontalLayout)
            # QApplication.processEvents()

    def valueChange(self):
        control = self.sender()
        tab_name = control.parent().objectName()
        if isinstance(control, QtWidgets.QCheckBox):
            setattr(getattr(gv.cf, tab_name), control.objectName(), control.isChecked())
        elif isinstance(control, QtWidgets.QLineEdit):
            setting = getattr(gv.cf.__dict__[tab_name], control.objectName())
            if isinstance(setting, int):
                setattr(getattr(gv.cf, tab_name), control.objectName(), int(control.text()))
            else:
                setattr(getattr(gv.cf, tab_name), control.objectName(), control.text())
        self.isChange = True

        # print('set config: ', control.objectName(), '=', control.text())
        # print(gv.cf.station.station_name, type(gv.cf.station.station_name))
        # print(gv.cf.station.fix_com_baudRate, type(gv.cf.station.fix_com_baudRate))
        # print(gv.cf.station.fix_flag, type(gv.cf.station.fix_flag))

    # def update_setting(self, value):
    #     if isinstance(value, bool):
    #         pass
