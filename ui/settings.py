# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QDialog

from ui.ui_settings import Ui_SettingsDialog
import conf.globalvar as gv


class SettingsDialog(QDialog, Ui_SettingsDialog):
    isChange = False

    def __init__(self, parent=None):
        QDialog.__init__(self, parent)
        Ui_SettingsDialog.__init__(self)
        self.verticalLayout = None
        self.horizontalLayout = None
        self.setupUi(self)
        self.refresh()

    def init_tabWidget(self):
        for x in gv.cfg.__dict__:
            setattr(self, x, QtWidgets.QWidget())
            tab = getattr(self, x)
            tab.setObjectName(x)
            self.tabWidget.addTab(tab, "")
            self.tabWidget.setTabText(self.tabWidget.indexOf(tab), x)
            self.verticalLayout = QtWidgets.QVBoxLayout(tab)
            self.verticalLayout.setContentsMargins(2, 2, 2, 2)
            self.verticalLayout.setSpacing(10)
            self.verticalLayout.setObjectName("verticalLayout")
            self.updateDialog(tab, x)
        self.timer.stop()

    def updateDialog(self, tab, x):
        for y in gv.cfg.__dict__[x].__dict__:
            setting = getattr(gv.cfg.__dict__[x], y)
            if isinstance(setting, list) or isinstance(setting, dict):
                continue
            # horizontalLayout
            self.horizontalLayout = QtWidgets.QHBoxLayout()
            self.horizontalLayout.setContentsMargins(1, -1, -1, -1)
            self.horizontalLayout.setSpacing(1)
            self.horizontalLayout.setObjectName("horizontalLayout")
            # label
            setattr(self, y, QtWidgets.QLabel(tab))
            label = getattr(self, y)
            label.setObjectName(y)
            label.setText(y)
            self.horizontalLayout.addWidget(label)
            if isinstance(setting, bool):
                # checkbox
                setattr(self, y, QtWidgets.QCheckBox(tab))
                checkbox = getattr(self, y)
                checkbox.setObjectName(y)
                checkbox.setChecked(setting)
                self.horizontalLayout.addWidget(checkbox)
                checkbox.stateChanged.connect(self.valueChange)
            else:
                # lineEdit
                setattr(self, y, QtWidgets.QLineEdit(tab))
                lineEdit = getattr(self, y)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
                lineEdit.setSizePolicy(sizePolicy)
                lineEdit.setMinimumSize(QtCore.QSize(450, 20))
                lineEdit.setObjectName(y)
                lineEdit.setText(str(setting))
                lineEdit.textChanged.connect(self.valueChange)
                if isinstance(setting, str):
                    pass
                elif isinstance(setting, int):
                    lineEdit.setStyleSheet(f"color: rgb(0, 0, 255);")
                self.horizontalLayout.addWidget(lineEdit)
            self.verticalLayout.addLayout(self.horizontalLayout)

    def valueChange(self):
        control = self.sender()
        tab_name = control.parent().objectName()
        if isinstance(control, QtWidgets.QCheckBox):
            setattr(getattr(gv.cfg, tab_name), control.objectName(), control.isChecked())
        elif isinstance(control, QtWidgets.QLineEdit):
            setting = getattr(gv.cfg.__dict__[tab_name], control.objectName())
            if isinstance(setting, int):
                setattr(getattr(gv.cfg, tab_name), control.objectName(), int(control.text()))
            else:
                setattr(getattr(gv.cfg, tab_name), control.objectName(), control.text())
        self.isChange = True

    def refresh(self):
        self.timer = QTimer()
        self.timer.timeout.connect(self.init_tabWidget)
        self.timer.start(10)  # 10 times per sec
