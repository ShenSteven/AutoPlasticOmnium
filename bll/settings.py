# -*- coding: utf-8 -*-
import ast

# Form implementation generated from reading ui file 'ui_settings.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtWidgets import QDialog, QFormLayout

from ui.ui_settings import Ui_SettingsDialog
import conf.globalvar as gv


class SettingsDialog(QDialog, Ui_SettingsDialog):
    isChange = False

    def __init__(self, parent=None):
        QDialog.__init__(self, parent)
        Ui_SettingsDialog.__init__(self)
        self.formLayout = QFormLayout()
        self.setupUi(self)
        self.refresh()

    def init_tabWidget(self):
        for x in gv.cfg.__dict__:
            setattr(self, x, QtWidgets.QWidget())
            tab = getattr(self, x)
            tab.setObjectName(x)
            self.tabWidget.addTab(tab, "")
            self.tabWidget.setTabText(self.tabWidget.indexOf(tab), x)
            self.formLayout = QFormLayout()
            self.updateDialog(tab, x)
        self.timer.stop()

    def updateDialog(self, tab, x):
        for y in gv.cfg.__dict__[x].__dict__:
            setting = getattr(gv.cfg.__dict__[x], y)
            # label
            setattr(self, y, QtWidgets.QLabel(tab))
            label = getattr(self, y)
            label.setObjectName(y)
            label.setText(y)
            if isinstance(setting, bool):
                # checkbox
                setattr(self, y, QtWidgets.QCheckBox(tab))
                checkbox = getattr(self, y)
                checkbox.setObjectName(y)
                checkbox.setChecked(setting)
                checkbox.stateChanged.connect(self.valueChange)
                self.formLayout.addRow(label, checkbox)
            else:
                # lineEdit
                setattr(self, y, QtWidgets.QLineEdit(tab))
                lineEdit = getattr(self, y)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
                lineEdit.setSizePolicy(sizePolicy)
                lineEdit.setMinimumSize(QtCore.QSize(450, 20))
                lineEdit.setObjectName(y)
                lineEdit.setText(str(setting))
                lineEdit.textChanged.connect(self.valueChange)
                if isinstance(setting, int):
                    lineEdit.setStyleSheet(f"color: rgb(0, 0, 255);")
                elif isinstance(setting, dict):
                    lineEdit.setStyleSheet(f"color: rgb(255, 0, 255);")
                elif isinstance(setting, list):
                    lineEdit.setStyleSheet(f"color: rgb(0, 200,100);")
                self.formLayout.addRow(label, lineEdit)
            self.formLayout.setFieldGrowthPolicy(QFormLayout.FieldsStayAtSizeHint)
            self.formLayout.setFormAlignment(Qt.AlignHCenter | Qt.AlignTop)
            self.formLayout.setLabelAlignment(Qt.AlignLeft)
            # self.formLayout.setSpacing(5)
            tab.setLayout(self.formLayout)

    def valueChange(self):
        control = self.sender()
        tab_name = control.parent().objectName()
        setting = getattr(gv.cfg.__dict__[tab_name], control.objectName())
        try:
            if isinstance(setting, bool):
                setattr(getattr(gv.cfg, tab_name), control.objectName(), control.isChecked())
            elif not isinstance(setting, bool) and isinstance(setting, int):  # bool是int的一个子类型
                setattr(getattr(gv.cfg, tab_name), control.objectName(), int(control.text()))
            elif isinstance(setting, list):
                setattr(getattr(gv.cfg, tab_name), control.objectName(), ast.literal_eval(control.text()))
            elif isinstance(setting, dict):
                setattr(getattr(gv.cfg, tab_name), control.objectName(), eval(control.text()))
            else:
                setattr(getattr(gv.cfg, tab_name), control.objectName(), control.text())
        except:
            setattr(getattr(gv.cfg, tab_name), control.objectName(), setting)
        self.isChange = True
        # self.done(QDialog.Accepted)
        # self.done(QDialog.Rejected)

    def refresh(self):
        self.timer = QTimer()
        self.timer.timeout.connect(self.init_tabWidget)
        self.timer.start(10)  # 10 times per sec
